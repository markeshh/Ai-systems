# === –Ü–ú–ü–û–†–¢ –ë–Ü–ë–õ–Ü–û–¢–ï–ö ===
import numpy as np
import matplotlib.pyplot as plt
from pandas import read_csv
from pandas.plotting import scatter_matrix
import seaborn as sns

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# === –ö–†–û–ö 1. –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ===
iris = load_iris()
X = iris.data
y = iris.target

print("–ù–∞–∑–≤–∏ –æ–∑–Ω–∞–∫:", iris.feature_names)
print("–ù–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤:", iris.target_names)
print("–ü–µ—Ä—à—ñ 5 –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ X:\n", X[:5])
print("–ú—ñ—Ç–∫–∏ y:", y[:5])

# === –ö–†–û–ö 2. –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• ===
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫ DataFrame –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
iris_df = read_csv(url, names=names)

# üìä –î—ñ–∞–≥—Ä–∞–º–∞ —Ä–æ–∑–º–∞—Ö—É
iris_df.iloc[:, 0:4].plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.suptitle("–î—ñ–∞–≥—Ä–∞–º–∞ —Ä–æ–∑–º–∞—Ö—É –æ–∑–Ω–∞–∫ Iris")
plt.tight_layout()
plt.show()

# üìä –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –æ–∑–Ω–∞–∫
iris_df.hist()
plt.suptitle("–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –æ–∑–Ω–∞–∫ Iris")
plt.tight_layout()
plt.show()

# üìä –ú–∞—Ç—Ä–∏—Ü—è –¥—ñ–∞–≥—Ä–∞–º —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è
scatter_matrix(iris_df.iloc[:, 0:4])
plt.suptitle("Scatter Matrix –æ–∑–Ω–∞–∫ Iris")
plt.tight_layout()
plt.show()

# === –ö–†–û–ö 3. –†–û–ó–ë–ò–¢–¢–Ø –î–ê–ù–ò–• ===
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=1)

# === –ö–†–û–ö 4. –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –†–Ü–ó–ù–ò–ú–ò –ú–ï–¢–û–î–ê–ú–ò ===
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

results = []
names = []

print("\n–û—Ü—ñ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π (10-fold cross-validation):")
for name, model in models:
    kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)
    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print(f"{name}: {cv_results.mean():.4f} ¬± {cv_results.std():.4f}")

# üìä –ü–æ–±—É–¥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
plt.boxplot(results, labels=names)
plt.title("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (Accuracy)")
plt.grid(True)
plt.show()

# === –ö–†–û–ö 5. –ö–û–ù–¢–†–û–õ–¨–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–ê SVM ===
model = SVC(gamma='auto')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("\n–û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ SVM –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification report:\n", classification_report(y_test, y_pred, target_names=iris.target_names))

# === –ö–†–û–ö 6. –ü–†–û–ì–ù–û–ó –î–õ–Ø –ù–û–í–û–á –ö–í–Ü–¢–ö–ò ===
X_new = np.array([[5.5, 4.1, 1.5, 0.3]])
prediction = model.predict(X_new)

print("\n–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–æ—ó –∫–≤—ñ—Ç–∫–∏:")
print("–ö–ª–∞—Å:", prediction[0])
print("–¶–µ —Å–æ—Ä—Ç:", iris.target_names[prediction[0]])
